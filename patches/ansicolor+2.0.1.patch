diff --git a/node_modules/ansicolor/ansicolor.d.ts b/node_modules/ansicolor/ansicolor.d.ts
index 899eb02..b0cdda3 100644
--- a/node_modules/ansicolor/ansicolor.d.ts
+++ b/node_modules/ansicolor/ansicolor.d.ts
@@ -103,7 +103,7 @@ export declare class ansicolor {
     static get rgb (): RGBValues;
     static set rgb (newSchema: RGBValues);
 
-    static parse (text: string): AnsiColored;
+    static parse (text: string, textOptions?: string[]): AnsiColored;
     static strip (text: string): string;
     static isEscaped (x?: any): boolean;
 
diff --git a/node_modules/ansicolor/ansicolor.js b/node_modules/ansicolor/ansicolor.js
index 6d8a6e2..8c534f3 100644
--- a/node_modules/ansicolor/ansicolor.js
+++ b/node_modules/ansicolor/ansicolor.js
@@ -21,6 +21,16 @@ const colorCodes      = [   'black',      'red',      'green',      'yellow',
                    'black':     'darkGray',
                    'lightGray': 'white' }
 
+    , asDark = { 'lightRed':     'red',
+                 'lightGreen':   'green',
+                 'lightYellow':  'yellow',
+                 'lightBlue':    'blue',
+                 'lightMagenta': 'magenta',
+                 'lightCyan':    'cyan',
+                 'lightGray':    'darkGray',
+                 'darkGray':     'black',
+                 'white':        'lightGray' }
+
     , types = { 0:  'style',
                 2:  'unstyle',
                 3:  'color',
@@ -71,11 +81,11 @@ class Color {
         return new Color (this.background, this.name, this.brightness || value)
     }
 
-    css (inverted) {
+    css (inverted, darkenText) {
 
         const color = inverted ? this.inverse : this
 
-        const rgbName = ((color.brightness === Code.bright) && asBright[color.name]) || color.name
+        const rgbName = ((color.brightness === Code.bright) && asBright[color.name]) || (darkenText && asDark[color.name]) || color.name
 
         const prop = (color.background ? 'background:' : 'color:')
             , rgb  = Colors.rgb[rgbName]
@@ -145,7 +155,8 @@ O.assign (Code, {
     noUnderline:  24,
     noInverse:    27,
     noColor:      39,
-    noBgColor:    49
+    noBgColor:    49,
+    noDim:        59
 })
 
 /*  ------------------------------------------------------------------------ */
@@ -340,9 +351,10 @@ function* processChunk(chunk, stateObject) {
 /**
  * Parse ansi text
  * @param {Generator<Span, void, *>} rawSpansIterator raw spans iterator
+ * @param {Array<string>=} textOptions text styling options
  * @return {Generator<Span, void, *>}
  */
-function* parseAnsi(rawSpansIterator) {
+function* parseAnsi(rawSpansIterator, textOptions) {
     let color = new Color();
     let bgColor = new Color(true /* background */);
     let brightness = undefined;
@@ -357,6 +369,14 @@ function* parseAnsi(rawSpansIterator) {
 
     reset();
 
+    let opaqueText = false;
+    let darkenText = false;
+
+    if (textOptions) {
+        opaqueText = textOptions.includes('opaque');
+        darkenText = textOptions.includes('darken');
+    }
+
     for (const span of rawSpansIterator) {
         const c = span.code;
 
@@ -368,11 +388,11 @@ function* parseAnsi(rawSpansIterator) {
             const italic = styles.has("italic") ? "font-style: italic;" : "";
             const bold = brightness === Code.bright ? "font-weight: bold;" : "";
 
-            const foreColor = color.defaultBrightness(brightness);
+            const foreColor = color.defaultBrightness(opaqueText ? Code.noDim : brightness);
 
             const newSpan = new Span(span.code ? span.code.clone() : undefined, span.text);
 
-            newSpan.css = span.css ? span.css : bold + italic + underline + foreColor.css(inverted) + bgColor.css(inverted);
+            newSpan.css = span.css ? span.css : bold + italic + underline + foreColor.css(inverted, darkenText) + bgColor.css(inverted);
             newSpan.bold = span.bold ? span.bold : !!bold;
             newSpan.color = span.color ? span.color : foreColor.clean;
             newSpan.bgColor = span.bgColor ? span.bgColor : bgColor.clean;
@@ -439,10 +459,13 @@ class Colors {
         return this.spans.reduce ((str, p) => str + p.text + p.code.str, '')
     }
 
-    get parsed () {
+    /**
+     * @param {Array<string>=} textOptions text styling options
+     */
+    parsed (textOptions) {
         const newColors = new Colors();
 
-        newColors.spans = Array.from(parseAnsi(this.spans));
+        newColors.spans = Array.from(parseAnsi(this.spans, textOptions));
 
         return newColors;
     }
@@ -478,10 +501,11 @@ class Colors {
 
     /**
      * @desc parses a string containing ANSI escape codes
+     * @param {Array<string>=} textOptions text styling options
      * @return {Colors} parsed representation.
      */
-    static parse (s) {
-        return new Colors (s).parsed
+    static parse (s, textOptions) {
+        return new Colors (s).parsed(textOptions)
     }
 
     /**
diff --git a/node_modules/ansicolor/build/ansicolor.js b/node_modules/ansicolor/build/ansicolor.js
index 681ae56..0008190 100644
--- a/node_modules/ansicolor/build/ansicolor.js
+++ b/node_modules/ansicolor/build/ansicolor.js
@@ -18,6 +18,15 @@ const colorCodes = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan'
     'cyan': 'lightCyan',
     'black': 'darkGray',
     'lightGray': 'white' },
+      asDark = { 'lightRed': 'red',
+    'lightGreen': 'green',
+    'lightYellow': 'yellow',
+    'lightBlue': 'blue',
+    'lightMagenta': 'magenta',
+    'lightCyan': 'cyan',
+    'lightGray': 'darkGray',
+    'darkGray': 'black',
+    'white': 'lightGray' },
       types = { 0: 'style',
     2: 'unstyle',
     3: 'color',
@@ -67,11 +76,11 @@ const colorCodes = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan'
         return new Color(this.background, this.name, this.brightness || value);
     }
 
-    css(inverted) {
+    css(inverted, darkenText) {
 
         const color = inverted ? this.inverse : this;
 
-        const rgbName = color.brightness === Code.bright && asBright[color.name] || color.name;
+        const rgbName = color.brightness === Code.bright && asBright[color.name] || darkenText && asDark[color.name] || color.name;
 
         const prop = color.background ? 'background:' : 'color:',
               rgb = Colors.rgb[rgbName],
@@ -136,7 +145,8 @@ O.assign(Code, {
     noUnderline: 24,
     noInverse: 27,
     noColor: 39,
-    noBgColor: 49
+    noBgColor: 49,
+    noDim: 59
 });
 
 /*  ------------------------------------------------------------------------ */
@@ -303,9 +313,10 @@ function* processChunk(chunk, stateObject) {
 /**
  * Parse ansi text
  * @param {Generator<Span, void, *>} rawSpansIterator raw spans iterator
+ * @param {Array<string>=} textOptions text styling options
  * @return {Generator<Span, void, *>}
  */
-function* parseAnsi(rawSpansIterator) {
+function* parseAnsi(rawSpansIterator, textOptions) {
     let color = new Color();
     let bgColor = new Color(true /* background */);
     let brightness = undefined;
@@ -320,6 +331,14 @@ function* parseAnsi(rawSpansIterator) {
 
     reset();
 
+    let opaqueText = false;
+    let darkenText = false;
+
+    if (textOptions) {
+        opaqueText = textOptions.includes('opaque');
+        darkenText = textOptions.includes('darken');
+    }
+
     for (const span of rawSpansIterator) {
         const c = span.code;
 
@@ -329,11 +348,11 @@ function* parseAnsi(rawSpansIterator) {
             const italic = styles.has("italic") ? "font-style: italic;" : "";
             const bold = brightness === Code.bright ? "font-weight: bold;" : "";
 
-            const foreColor = color.defaultBrightness(brightness);
+            const foreColor = color.defaultBrightness(opaqueText ? Code.noDim : brightness);
 
             const newSpan = new Span(span.code ? span.code.clone() : undefined, span.text);
 
-            newSpan.css = span.css ? span.css : bold + italic + underline + foreColor.css(inverted) + bgColor.css(inverted);
+            newSpan.css = span.css ? span.css : bold + italic + underline + foreColor.css(inverted, darkenText) + bgColor.css(inverted);
             newSpan.bold = span.bold ? span.bold : !!bold;
             newSpan.color = span.color ? span.color : foreColor.clean;
             newSpan.bgColor = span.bgColor ? span.bgColor : bgColor.clean;
@@ -399,10 +418,13 @@ class Colors {
         return this.spans.reduce((str, p) => str + p.text + p.code.str, '');
     }
 
-    get parsed() {
+    /**
+     * @param {Array<string>=} textOptions text styling options
+     */
+    parsed(textOptions) {
         const newColors = new Colors();
 
-        newColors.spans = Array.from(parseAnsi(this.spans));
+        newColors.spans = Array.from(parseAnsi(this.spans, textOptions));
 
         return newColors;
     }
@@ -441,10 +463,11 @@ class Colors {
 
     /**
      * @desc parses a string containing ANSI escape codes
+     * @param {Array<string>=} textOptions text styling options
      * @return {Colors} parsed representation.
      */
-    static parse(s) {
-        return new Colors(s).parsed;
+    static parse(s, textOptions) {
+        return new Colors(s).parsed(textOptions);
     }
 
     /**
@@ -534,4 +557,4 @@ Colors.rgb = {
 
 /*  ------------------------------------------------------------------------ */
 
-//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
