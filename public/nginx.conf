# This config file was taken from the default nginx image by running:
# $ docker run --rm --detach --name tmp nginx:alpine
# $ docker cp tmp:/etc/nginx/nginx.conf
# Any modifications from the default should have comments.
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


##########################CSP VARIABLES#######################
# CSP Settings based on:
# LogRocket - https://docs.logrocket.com/docs/troubleshooting-sessions#due-to-content-security-policy
# GTM - https://developers.google.com/tag-platform/security/guides/csp
# Stripe - https://docs.stripe.com/security/guide?csp=csp-connect#content-security-policy

########################## script src #######################
set $SCRIPT "script-src 'self' 'unsafe-eval'";
set $SCRIPT "${SCRIPT} https://docs.estuary.dev ";
set $SCRIPT "${SCRIPT} https://cdn.logrocket.io";
set $SCRIPT "${SCRIPT} https://cdn.lr-ingest.io";
set $SCRIPT "${SCRIPT} https://cdn.lr-in.com";
set $SCRIPT "${SCRIPT} https://cdn.lr-in-prod.com";
set $SCRIPT "${SCRIPT} https://cdn.lr-ingest.com";
set $SCRIPT "${SCRIPT} https://cdn.ingest-lr.com";
set $SCRIPT "${SCRIPT} https://cdn.lr-intake.com";
set $SCRIPT "${SCRIPT} https://cdn.intake-lr.com";
set $SCRIPT "${SCRIPT} https://*.google-analytics.com";
set $SCRIPT "${SCRIPT} https://*.analytics.google.com";
set $SCRIPT "${SCRIPT} https://*.googletagmanager.com";
set $SCRIPT "${SCRIPT} https://*.g.doubleclick.net";
set $SCRIPT "${SCRIPT} https://*.google.com";
set $SCRIPT "${SCRIPT} https://*.reo.dev";
set $SCRIPT "${SCRIPT} https://*.stripe.network";
set $SCRIPT "${SCRIPT} https://*.js.stripe.com";
set $SCRIPT "${SCRIPT} https://js.stripe.com";
set $SCRIPT "${SCRIPT} https://maps.googleapis.com";

set $CONNECT "connect-src 'self'";
set $CONNECT "${CONNECT} https://eyrcnmuzzyriypdajwdk.supabase.co";
set $CONNECT "${CONNECT} https://config-encryption.estuary.dev";
set $CONNECT "${CONNECT} https://*.estuary-data.dev";
set $CONNECT "${CONNECT} https://agent-api-1084703453822.us-central1.run.app";
set $CONNECT "${CONNECT} https://gcp-marketplace-verify-mo7rswd2xq-uc.a.run.app";
set $CONNECT "${CONNECT} https://*.logrocket.io";
set $CONNECT "${CONNECT} https://*.lr-ingest.io";
set $CONNECT "${CONNECT} https://*.logrocket.com";
set $CONNECT "${CONNECT} https://*.lr-in.com";
set $CONNECT "${CONNECT} https://*.lr-in-prod.com";
set $CONNECT "${CONNECT} https://*.lr-ingest.com";
set $CONNECT "${CONNECT} https://*.ingest-lr.com";
set $CONNECT "${CONNECT} https://*.lr-intake.com";
set $CONNECT "${CONNECT} https://*.logr-ingest.com";
set $CONNECT "${CONNECT} https://api.stripe.com";
set $CONNECT "${CONNECT} https://maps.googleapis.com";

set $FRAME "frame-src 'self'";
set $FRAME "${FRAME} https://docs.estuary.dev"; 
set $FRAME "${FRAME} https://go.estuary.dev"; 
set $FRAME "${FRAME} https://connect-js.stripe.com";
set $FRAME "${FRAME} https://js.stripe.com";
set $FRAME "${FRAME} https://*.js.stripe.com";
set $FRAME "${FRAME} https://hooks.stripe.com";
set $FRAME "${FRAME} https://td.doubleclick.net";

set $IMG "img-src 'self' data: https:";

set $STYLE "style-src 'self' 'unsafe-inline' https:";

set $CHILD "child-src 'self' blob: https:";

set $MISC "font-src 'self' data: https:;";
set $MISC "${MISC} default-src 'none';";
set $MISC "${MISC} object-src 'none';";
set $MISC "${MISC} reflected-xss 'block';";
set $MISC "${MISC} base-uri 'self';";
set $MISC "${MISC} form-action 'self';";
set $MISC "${MISC} frame-ancestors 'self';";
set $MISC "${MISC} report-uri 'self';";
set $MISC "${MISC} require-trusted-types-for 'script';";
set $MISC "${MISC} upgrade-insecure-requests;";


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # X-Frame-Options is to prevent from clickJacking attack
    add_header X-Frame-Options SAMEORIGIN;

    # disable content-type sniffing on some browsers.
    add_header X-Content-Type-Options nosniff;

    # Enable gzip
    gzip on;
    gzip_min_length  500;
    gzip_proxied     any;
    gzip_comp_level 4;
    gzip_types  text/css text/javascript text/xml text/plain text/x-component application/javascript application/json application/wasm application/xml font/truetype font/opentype font/woff2 image/svg+xml;
    gzip_vary on;
    gzip_disable     "msie6";

    # This configuration was added so that users refreshing the page will not get a 404 due to the
    # react router URLs (e.g. `/captures/create`) not corresponding to an actual resource on the
    # server. The `try_files` will ensure that we serve index.html if the requested resource is not
    # found. This was adapted from /etc/nginx/conf.d/default.conf, which was previously brought in
    # with an `include` directive.

    server {
        listen       80;
        listen  [::]:80;
        server_name  localhost;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
            add_header Cache-Control 'no-cache, no-store, must-revalidate';
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
            add_header X-Frame-Options SAMEORIGIN always;
            add_header X-Content-Type-Options nosniff always;
            add_header Referrer-Policy strict-origin-when-cross-origin always;
            add_header Permissions-Policy "geolocation=(), microphone=(), camera=() always";
            add_header Content-Security-Policy "${SCRIPT}; ${CONNECT}; ${FRAME}; ${IMG}; ${STYLE}; ${CHILD}; ${MISC}";

            # Here to serve our T&C doc
            location /terms.html {
                root   /usr/share/nginx/html;
                index  terms.html;
                try_files $uri $uri/ /terms.html;
            }

            # Serves json file used for UI to figure out latest build
            location /meta.json {
                root   /usr/share/nginx/html;
                index  meta.json;
                try_files $uri $uri/ /meta.json;
            }
        }

        # Server up the JS/images/etc. from UI build
        location /static {
            alias   /usr/share/nginx/html/static;
            expires 1y;
            add_header Cache-Control "public";
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        if (-f /usr/share/nginx/html/maintenance) {
            return 503;
        }
        error_page 503 @maintenance;

        location @maintenance {
            root /usr/share/nginx/html;
            rewrite ^(.*)$ /503.html break;
        }
    }
}


